// Code generated by SQLBoiler 4.14.2 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package dbmodels

import (
	"context"
	"database/sql"
	"fmt"
	"reflect"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/friendsofgo/errors"
	"github.com/volatiletech/null/v8"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/sqlboiler/v4/queries/qm"
	"github.com/volatiletech/sqlboiler/v4/queries/qmhelper"
	"github.com/volatiletech/strmangle"
)

// TaskTag is an object representing the database table.
type TaskTag struct {
	TaskID    string    `boil:"task_id" json:"task_id" toml:"task_id" yaml:"task_id"`
	TagID     string    `boil:"tag_id" json:"tag_id" toml:"tag_id" yaml:"tag_id"`
	CreatedAt null.Time `boil:"created_at" json:"created_at,omitempty" toml:"created_at" yaml:"created_at,omitempty"`
	TaskTagID string    `boil:"task_tag_id" json:"task_tag_id" toml:"task_tag_id" yaml:"task_tag_id"`

	R *taskTagR `boil:"-" json:"-" toml:"-" yaml:"-"`
	L taskTagL  `boil:"-" json:"-" toml:"-" yaml:"-"`
}

var TaskTagColumns = struct {
	TaskID    string
	TagID     string
	CreatedAt string
	TaskTagID string
}{
	TaskID:    "task_id",
	TagID:     "tag_id",
	CreatedAt: "created_at",
	TaskTagID: "task_tag_id",
}

var TaskTagTableColumns = struct {
	TaskID    string
	TagID     string
	CreatedAt string
	TaskTagID string
}{
	TaskID:    "task_tags.task_id",
	TagID:     "task_tags.tag_id",
	CreatedAt: "task_tags.created_at",
	TaskTagID: "task_tags.task_tag_id",
}

// Generated where

var TaskTagWhere = struct {
	TaskID    whereHelperstring
	TagID     whereHelperstring
	CreatedAt whereHelpernull_Time
	TaskTagID whereHelperstring
}{
	TaskID:    whereHelperstring{field: "\"task_tags\".\"task_id\""},
	TagID:     whereHelperstring{field: "\"task_tags\".\"tag_id\""},
	CreatedAt: whereHelpernull_Time{field: "\"task_tags\".\"created_at\""},
	TaskTagID: whereHelperstring{field: "\"task_tags\".\"task_tag_id\""},
}

// TaskTagRels is where relationship names are stored.
var TaskTagRels = struct {
	Tag  string
	Task string
}{
	Tag:  "Tag",
	Task: "Task",
}

// taskTagR is where relationships are stored.
type taskTagR struct {
	Tag  *Tag  `boil:"Tag" json:"Tag" toml:"Tag" yaml:"Tag"`
	Task *Task `boil:"Task" json:"Task" toml:"Task" yaml:"Task"`
}

// NewStruct creates a new relationship struct
func (*taskTagR) NewStruct() *taskTagR {
	return &taskTagR{}
}

func (r *taskTagR) GetTag() *Tag {
	if r == nil {
		return nil
	}
	return r.Tag
}

func (r *taskTagR) GetTask() *Task {
	if r == nil {
		return nil
	}
	return r.Task
}

// taskTagL is where Load methods for each relationship are stored.
type taskTagL struct{}

var (
	taskTagAllColumns            = []string{"task_id", "tag_id", "created_at", "task_tag_id"}
	taskTagColumnsWithoutDefault = []string{"task_id", "tag_id", "task_tag_id"}
	taskTagColumnsWithDefault    = []string{"created_at"}
	taskTagPrimaryKeyColumns     = []string{"task_tag_id"}
	taskTagGeneratedColumns      = []string{}
)

type (
	// TaskTagSlice is an alias for a slice of pointers to TaskTag.
	// This should almost always be used instead of []TaskTag.
	TaskTagSlice []*TaskTag
	// TaskTagHook is the signature for custom TaskTag hook methods
	TaskTagHook func(context.Context, boil.ContextExecutor, *TaskTag) error

	taskTagQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	taskTagType                 = reflect.TypeOf(&TaskTag{})
	taskTagMapping              = queries.MakeStructMapping(taskTagType)
	taskTagPrimaryKeyMapping, _ = queries.BindMapping(taskTagType, taskTagMapping, taskTagPrimaryKeyColumns)
	taskTagInsertCacheMut       sync.RWMutex
	taskTagInsertCache          = make(map[string]insertCache)
	taskTagUpdateCacheMut       sync.RWMutex
	taskTagUpdateCache          = make(map[string]updateCache)
	taskTagUpsertCacheMut       sync.RWMutex
	taskTagUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force qmhelper dependency for where clause generation (which doesn't
	// always happen)
	_ = qmhelper.Where
)

var taskTagAfterSelectHooks []TaskTagHook

var taskTagBeforeInsertHooks []TaskTagHook
var taskTagAfterInsertHooks []TaskTagHook

var taskTagBeforeUpdateHooks []TaskTagHook
var taskTagAfterUpdateHooks []TaskTagHook

var taskTagBeforeDeleteHooks []TaskTagHook
var taskTagAfterDeleteHooks []TaskTagHook

var taskTagBeforeUpsertHooks []TaskTagHook
var taskTagAfterUpsertHooks []TaskTagHook

// doAfterSelectHooks executes all "after Select" hooks.
func (o *TaskTag) doAfterSelectHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range taskTagAfterSelectHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeInsertHooks executes all "before insert" hooks.
func (o *TaskTag) doBeforeInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range taskTagBeforeInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterInsertHooks executes all "after Insert" hooks.
func (o *TaskTag) doAfterInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range taskTagAfterInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpdateHooks executes all "before Update" hooks.
func (o *TaskTag) doBeforeUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range taskTagBeforeUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpdateHooks executes all "after Update" hooks.
func (o *TaskTag) doAfterUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range taskTagAfterUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeDeleteHooks executes all "before Delete" hooks.
func (o *TaskTag) doBeforeDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range taskTagBeforeDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterDeleteHooks executes all "after Delete" hooks.
func (o *TaskTag) doAfterDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range taskTagAfterDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpsertHooks executes all "before Upsert" hooks.
func (o *TaskTag) doBeforeUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range taskTagBeforeUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpsertHooks executes all "after Upsert" hooks.
func (o *TaskTag) doAfterUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range taskTagAfterUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// AddTaskTagHook registers your hook function for all future operations.
func AddTaskTagHook(hookPoint boil.HookPoint, taskTagHook TaskTagHook) {
	switch hookPoint {
	case boil.AfterSelectHook:
		taskTagAfterSelectHooks = append(taskTagAfterSelectHooks, taskTagHook)
	case boil.BeforeInsertHook:
		taskTagBeforeInsertHooks = append(taskTagBeforeInsertHooks, taskTagHook)
	case boil.AfterInsertHook:
		taskTagAfterInsertHooks = append(taskTagAfterInsertHooks, taskTagHook)
	case boil.BeforeUpdateHook:
		taskTagBeforeUpdateHooks = append(taskTagBeforeUpdateHooks, taskTagHook)
	case boil.AfterUpdateHook:
		taskTagAfterUpdateHooks = append(taskTagAfterUpdateHooks, taskTagHook)
	case boil.BeforeDeleteHook:
		taskTagBeforeDeleteHooks = append(taskTagBeforeDeleteHooks, taskTagHook)
	case boil.AfterDeleteHook:
		taskTagAfterDeleteHooks = append(taskTagAfterDeleteHooks, taskTagHook)
	case boil.BeforeUpsertHook:
		taskTagBeforeUpsertHooks = append(taskTagBeforeUpsertHooks, taskTagHook)
	case boil.AfterUpsertHook:
		taskTagAfterUpsertHooks = append(taskTagAfterUpsertHooks, taskTagHook)
	}
}

// One returns a single taskTag record from the query.
func (q taskTagQuery) One(ctx context.Context, exec boil.ContextExecutor) (*TaskTag, error) {
	o := &TaskTag{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(ctx, exec, o)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "dbmodels: failed to execute a one query for task_tags")
	}

	if err := o.doAfterSelectHooks(ctx, exec); err != nil {
		return o, err
	}

	return o, nil
}

// All returns all TaskTag records from the query.
func (q taskTagQuery) All(ctx context.Context, exec boil.ContextExecutor) (TaskTagSlice, error) {
	var o []*TaskTag

	err := q.Bind(ctx, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "dbmodels: failed to assign all query results to TaskTag slice")
	}

	if len(taskTagAfterSelectHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterSelectHooks(ctx, exec); err != nil {
				return o, err
			}
		}
	}

	return o, nil
}

// Count returns the count of all TaskTag records in the query.
func (q taskTagQuery) Count(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "dbmodels: failed to count task_tags rows")
	}

	return count, nil
}

// Exists checks if the row exists in the table.
func (q taskTagQuery) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "dbmodels: failed to check if task_tags exists")
	}

	return count > 0, nil
}

// Tag pointed to by the foreign key.
func (o *TaskTag) Tag(mods ...qm.QueryMod) tagQuery {
	queryMods := []qm.QueryMod{
		qm.Where("\"id\" = ?", o.TagID),
	}

	queryMods = append(queryMods, mods...)

	return Tags(queryMods...)
}

// Task pointed to by the foreign key.
func (o *TaskTag) Task(mods ...qm.QueryMod) taskQuery {
	queryMods := []qm.QueryMod{
		qm.Where("\"id\" = ?", o.TaskID),
	}

	queryMods = append(queryMods, mods...)

	return Tasks(queryMods...)
}

// LoadTag allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (taskTagL) LoadTag(ctx context.Context, e boil.ContextExecutor, singular bool, maybeTaskTag interface{}, mods queries.Applicator) error {
	var slice []*TaskTag
	var object *TaskTag

	if singular {
		var ok bool
		object, ok = maybeTaskTag.(*TaskTag)
		if !ok {
			object = new(TaskTag)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeTaskTag)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeTaskTag))
			}
		}
	} else {
		s, ok := maybeTaskTag.(*[]*TaskTag)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeTaskTag)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeTaskTag))
			}
		}
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &taskTagR{}
		}
		args = append(args, object.TagID)

	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &taskTagR{}
			}

			for _, a := range args {
				if a == obj.TagID {
					continue Outer
				}
			}

			args = append(args, obj.TagID)

		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`tags`),
		qm.WhereIn(`tags.id in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load Tag")
	}

	var resultSlice []*Tag
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice Tag")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for tags")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for tags")
	}

	if len(tagAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.Tag = foreign
		if foreign.R == nil {
			foreign.R = &tagR{}
		}
		foreign.R.TaskTags = append(foreign.R.TaskTags, object)
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if local.TagID == foreign.ID {
				local.R.Tag = foreign
				if foreign.R == nil {
					foreign.R = &tagR{}
				}
				foreign.R.TaskTags = append(foreign.R.TaskTags, local)
				break
			}
		}
	}

	return nil
}

// LoadTask allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (taskTagL) LoadTask(ctx context.Context, e boil.ContextExecutor, singular bool, maybeTaskTag interface{}, mods queries.Applicator) error {
	var slice []*TaskTag
	var object *TaskTag

	if singular {
		var ok bool
		object, ok = maybeTaskTag.(*TaskTag)
		if !ok {
			object = new(TaskTag)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeTaskTag)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeTaskTag))
			}
		}
	} else {
		s, ok := maybeTaskTag.(*[]*TaskTag)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeTaskTag)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeTaskTag))
			}
		}
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &taskTagR{}
		}
		args = append(args, object.TaskID)

	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &taskTagR{}
			}

			for _, a := range args {
				if a == obj.TaskID {
					continue Outer
				}
			}

			args = append(args, obj.TaskID)

		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`tasks`),
		qm.WhereIn(`tasks.id in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load Task")
	}

	var resultSlice []*Task
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice Task")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for tasks")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for tasks")
	}

	if len(taskAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.Task = foreign
		if foreign.R == nil {
			foreign.R = &taskR{}
		}
		foreign.R.TaskTags = append(foreign.R.TaskTags, object)
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if local.TaskID == foreign.ID {
				local.R.Task = foreign
				if foreign.R == nil {
					foreign.R = &taskR{}
				}
				foreign.R.TaskTags = append(foreign.R.TaskTags, local)
				break
			}
		}
	}

	return nil
}

// SetTag of the taskTag to the related item.
// Sets o.R.Tag to related.
// Adds o to related.R.TaskTags.
func (o *TaskTag) SetTag(ctx context.Context, exec boil.ContextExecutor, insert bool, related *Tag) error {
	var err error
	if insert {
		if err = related.Insert(ctx, exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE \"task_tags\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, []string{"tag_id"}),
		strmangle.WhereClause("\"", "\"", 2, taskTagPrimaryKeyColumns),
	)
	values := []interface{}{related.ID, o.TaskTagID}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, updateQuery)
		fmt.Fprintln(writer, values)
	}
	if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	o.TagID = related.ID
	if o.R == nil {
		o.R = &taskTagR{
			Tag: related,
		}
	} else {
		o.R.Tag = related
	}

	if related.R == nil {
		related.R = &tagR{
			TaskTags: TaskTagSlice{o},
		}
	} else {
		related.R.TaskTags = append(related.R.TaskTags, o)
	}

	return nil
}

// SetTask of the taskTag to the related item.
// Sets o.R.Task to related.
// Adds o to related.R.TaskTags.
func (o *TaskTag) SetTask(ctx context.Context, exec boil.ContextExecutor, insert bool, related *Task) error {
	var err error
	if insert {
		if err = related.Insert(ctx, exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE \"task_tags\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, []string{"task_id"}),
		strmangle.WhereClause("\"", "\"", 2, taskTagPrimaryKeyColumns),
	)
	values := []interface{}{related.ID, o.TaskTagID}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, updateQuery)
		fmt.Fprintln(writer, values)
	}
	if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	o.TaskID = related.ID
	if o.R == nil {
		o.R = &taskTagR{
			Task: related,
		}
	} else {
		o.R.Task = related
	}

	if related.R == nil {
		related.R = &taskR{
			TaskTags: TaskTagSlice{o},
		}
	} else {
		related.R.TaskTags = append(related.R.TaskTags, o)
	}

	return nil
}

// TaskTags retrieves all the records using an executor.
func TaskTags(mods ...qm.QueryMod) taskTagQuery {
	mods = append(mods, qm.From("\"task_tags\""))
	q := NewQuery(mods...)
	if len(queries.GetSelect(q)) == 0 {
		queries.SetSelect(q, []string{"\"task_tags\".*"})
	}

	return taskTagQuery{q}
}

// FindTaskTag retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindTaskTag(ctx context.Context, exec boil.ContextExecutor, taskTagID string, selectCols ...string) (*TaskTag, error) {
	taskTagObj := &TaskTag{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from \"task_tags\" where \"task_tag_id\"=$1", sel,
	)

	q := queries.Raw(query, taskTagID)

	err := q.Bind(ctx, exec, taskTagObj)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "dbmodels: unable to select from task_tags")
	}

	if err = taskTagObj.doAfterSelectHooks(ctx, exec); err != nil {
		return taskTagObj, err
	}

	return taskTagObj, nil
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *TaskTag) Insert(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error {
	if o == nil {
		return errors.New("dbmodels: no task_tags provided for insertion")
	}

	var err error
	if !boil.TimestampsAreSkipped(ctx) {
		currTime := time.Now().In(boil.GetLocation())

		if queries.MustTime(o.CreatedAt).IsZero() {
			queries.SetScanner(&o.CreatedAt, currTime)
		}
	}

	if err := o.doBeforeInsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(taskTagColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	taskTagInsertCacheMut.RLock()
	cache, cached := taskTagInsertCache[key]
	taskTagInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			taskTagAllColumns,
			taskTagColumnsWithDefault,
			taskTagColumnsWithoutDefault,
			nzDefaults,
		)

		cache.valueMapping, err = queries.BindMapping(taskTagType, taskTagMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(taskTagType, taskTagMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO \"task_tags\" (\"%s\") %%sVALUES (%s)%%s", strings.Join(wl, "\",\""), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO \"task_tags\" %sDEFAULT VALUES%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			queryReturning = fmt.Sprintf(" RETURNING \"%s\"", strings.Join(returnColumns, "\",\""))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}

	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}

	if err != nil {
		return errors.Wrap(err, "dbmodels: unable to insert into task_tags")
	}

	if !cached {
		taskTagInsertCacheMut.Lock()
		taskTagInsertCache[key] = cache
		taskTagInsertCacheMut.Unlock()
	}

	return o.doAfterInsertHooks(ctx, exec)
}

// Update uses an executor to update the TaskTag.
// See boil.Columns.UpdateColumnSet documentation to understand column list inference for updates.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (o *TaskTag) Update(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) (int64, error) {
	var err error
	if err = o.doBeforeUpdateHooks(ctx, exec); err != nil {
		return 0, err
	}
	key := makeCacheKey(columns, nil)
	taskTagUpdateCacheMut.RLock()
	cache, cached := taskTagUpdateCache[key]
	taskTagUpdateCacheMut.RUnlock()

	if !cached {
		wl := columns.UpdateColumnSet(
			taskTagAllColumns,
			taskTagPrimaryKeyColumns,
		)

		if !columns.IsWhitelist() {
			wl = strmangle.SetComplement(wl, []string{"created_at"})
		}
		if len(wl) == 0 {
			return 0, errors.New("dbmodels: unable to update task_tags, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE \"task_tags\" SET %s WHERE %s",
			strmangle.SetParamNames("\"", "\"", 1, wl),
			strmangle.WhereClause("\"", "\"", len(wl)+1, taskTagPrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(taskTagType, taskTagMapping, append(wl, taskTagPrimaryKeyColumns...))
		if err != nil {
			return 0, err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, values)
	}
	var result sql.Result
	result, err = exec.ExecContext(ctx, cache.query, values...)
	if err != nil {
		return 0, errors.Wrap(err, "dbmodels: unable to update task_tags row")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "dbmodels: failed to get rows affected by update for task_tags")
	}

	if !cached {
		taskTagUpdateCacheMut.Lock()
		taskTagUpdateCache[key] = cache
		taskTagUpdateCacheMut.Unlock()
	}

	return rowsAff, o.doAfterUpdateHooks(ctx, exec)
}

// UpdateAll updates all rows with the specified column values.
func (q taskTagQuery) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	queries.SetUpdate(q.Query, cols)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "dbmodels: unable to update all for task_tags")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "dbmodels: unable to retrieve rows affected for task_tags")
	}

	return rowsAff, nil
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o TaskTagSlice) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	ln := int64(len(o))
	if ln == 0 {
		return 0, nil
	}

	if len(cols) == 0 {
		return 0, errors.New("dbmodels: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), taskTagPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE \"task_tags\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), len(colNames)+1, taskTagPrimaryKeyColumns, len(o)))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "dbmodels: unable to update all in taskTag slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "dbmodels: unable to retrieve rows affected all in update all taskTag")
	}
	return rowsAff, nil
}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
// See boil.Columns documentation for how to properly use updateColumns and insertColumns.
func (o *TaskTag) Upsert(ctx context.Context, exec boil.ContextExecutor, updateOnConflict bool, conflictColumns []string, updateColumns, insertColumns boil.Columns) error {
	if o == nil {
		return errors.New("dbmodels: no task_tags provided for upsert")
	}
	if !boil.TimestampsAreSkipped(ctx) {
		currTime := time.Now().In(boil.GetLocation())

		if queries.MustTime(o.CreatedAt).IsZero() {
			queries.SetScanner(&o.CreatedAt, currTime)
		}
	}

	if err := o.doBeforeUpsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(taskTagColumnsWithDefault, o)

	// Build cache key in-line uglily - mysql vs psql problems
	buf := strmangle.GetBuffer()
	if updateOnConflict {
		buf.WriteByte('t')
	} else {
		buf.WriteByte('f')
	}
	buf.WriteByte('.')
	for _, c := range conflictColumns {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(updateColumns.Kind))
	for _, c := range updateColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(insertColumns.Kind))
	for _, c := range insertColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	taskTagUpsertCacheMut.RLock()
	cache, cached := taskTagUpsertCache[key]
	taskTagUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, ret := insertColumns.InsertColumnSet(
			taskTagAllColumns,
			taskTagColumnsWithDefault,
			taskTagColumnsWithoutDefault,
			nzDefaults,
		)

		update := updateColumns.UpdateColumnSet(
			taskTagAllColumns,
			taskTagPrimaryKeyColumns,
		)

		if updateOnConflict && len(update) == 0 {
			return errors.New("dbmodels: unable to upsert task_tags, could not build update column list")
		}

		conflict := conflictColumns
		if len(conflict) == 0 {
			conflict = make([]string, len(taskTagPrimaryKeyColumns))
			copy(conflict, taskTagPrimaryKeyColumns)
		}
		cache.query = buildUpsertQueryPostgres(dialect, "\"task_tags\"", updateOnConflict, ret, update, conflict, insert)

		cache.valueMapping, err = queries.BindMapping(taskTagType, taskTagMapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(taskTagType, taskTagMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}
	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(returns...)
		if errors.Is(err, sql.ErrNoRows) {
			err = nil // Postgres doesn't return anything when there's no update
		}
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}
	if err != nil {
		return errors.Wrap(err, "dbmodels: unable to upsert task_tags")
	}

	if !cached {
		taskTagUpsertCacheMut.Lock()
		taskTagUpsertCache[key] = cache
		taskTagUpsertCacheMut.Unlock()
	}

	return o.doAfterUpsertHooks(ctx, exec)
}

// Delete deletes a single TaskTag record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *TaskTag) Delete(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if o == nil {
		return 0, errors.New("dbmodels: no TaskTag provided for delete")
	}

	if err := o.doBeforeDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	args := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), taskTagPrimaryKeyMapping)
	sql := "DELETE FROM \"task_tags\" WHERE \"task_tag_id\"=$1"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "dbmodels: unable to delete from task_tags")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "dbmodels: failed to get rows affected by delete for task_tags")
	}

	if err := o.doAfterDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	return rowsAff, nil
}

// DeleteAll deletes all matching rows.
func (q taskTagQuery) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if q.Query == nil {
		return 0, errors.New("dbmodels: no taskTagQuery provided for delete all")
	}

	queries.SetDelete(q.Query)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "dbmodels: unable to delete all from task_tags")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "dbmodels: failed to get rows affected by deleteall for task_tags")
	}

	return rowsAff, nil
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o TaskTagSlice) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if len(o) == 0 {
		return 0, nil
	}

	if len(taskTagBeforeDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doBeforeDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	var args []interface{}
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), taskTagPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "DELETE FROM \"task_tags\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, taskTagPrimaryKeyColumns, len(o))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "dbmodels: unable to delete all from taskTag slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "dbmodels: failed to get rows affected by deleteall for task_tags")
	}

	if len(taskTagAfterDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	return rowsAff, nil
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *TaskTag) Reload(ctx context.Context, exec boil.ContextExecutor) error {
	ret, err := FindTaskTag(ctx, exec, o.TaskTagID)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *TaskTagSlice) ReloadAll(ctx context.Context, exec boil.ContextExecutor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	slice := TaskTagSlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), taskTagPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT \"task_tags\".* FROM \"task_tags\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, taskTagPrimaryKeyColumns, len(*o))

	q := queries.Raw(sql, args...)

	err := q.Bind(ctx, exec, &slice)
	if err != nil {
		return errors.Wrap(err, "dbmodels: unable to reload all in TaskTagSlice")
	}

	*o = slice

	return nil
}

// TaskTagExists checks if the TaskTag row exists.
func TaskTagExists(ctx context.Context, exec boil.ContextExecutor, taskTagID string) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from \"task_tags\" where \"task_tag_id\"=$1 limit 1)"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, taskTagID)
	}
	row := exec.QueryRowContext(ctx, sql, taskTagID)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "dbmodels: unable to check if task_tags exists")
	}

	return exists, nil
}

// Exists checks if the TaskTag row exists.
func (o *TaskTag) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	return TaskTagExists(ctx, exec, o.TaskTagID)
}
