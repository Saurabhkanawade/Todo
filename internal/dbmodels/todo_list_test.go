// Code generated by SQLBoiler 4.14.2 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package dbmodels

import (
	"bytes"
	"context"
	"reflect"
	"testing"

	"github.com/volatiletech/randomize"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/strmangle"
)

var (
	// Relationships sometimes use the reflection helper queries.Equal/queries.Assign
	// so force a package dependency in case they don't.
	_ = queries.Equal
)

func testTodoLists(t *testing.T) {
	t.Parallel()

	query := TodoLists()

	if query.Query == nil {
		t.Error("expected a query, got nothing")
	}
}

func testTodoListsDelete(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &TodoList{}
	if err = randomize.Struct(seed, o, todoListDBTypes, true, todoListColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize TodoList struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if rowsAff, err := o.Delete(ctx, tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := TodoLists().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testTodoListsQueryDeleteAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &TodoList{}
	if err = randomize.Struct(seed, o, todoListDBTypes, true, todoListColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize TodoList struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if rowsAff, err := TodoLists().DeleteAll(ctx, tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := TodoLists().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testTodoListsSliceDeleteAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &TodoList{}
	if err = randomize.Struct(seed, o, todoListDBTypes, true, todoListColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize TodoList struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice := TodoListSlice{o}

	if rowsAff, err := slice.DeleteAll(ctx, tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := TodoLists().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testTodoListsExists(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &TodoList{}
	if err = randomize.Struct(seed, o, todoListDBTypes, true, todoListColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize TodoList struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	e, err := TodoListExists(ctx, tx, o.ID)
	if err != nil {
		t.Errorf("Unable to check if TodoList exists: %s", err)
	}
	if !e {
		t.Errorf("Expected TodoListExists to return true, but got false.")
	}
}

func testTodoListsFind(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &TodoList{}
	if err = randomize.Struct(seed, o, todoListDBTypes, true, todoListColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize TodoList struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	todoListFound, err := FindTodoList(ctx, tx, o.ID)
	if err != nil {
		t.Error(err)
	}

	if todoListFound == nil {
		t.Error("want a record, got nil")
	}
}

func testTodoListsBind(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &TodoList{}
	if err = randomize.Struct(seed, o, todoListDBTypes, true, todoListColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize TodoList struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if err = TodoLists().Bind(ctx, tx, o); err != nil {
		t.Error(err)
	}
}

func testTodoListsOne(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &TodoList{}
	if err = randomize.Struct(seed, o, todoListDBTypes, true, todoListColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize TodoList struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if x, err := TodoLists().One(ctx, tx); err != nil {
		t.Error(err)
	} else if x == nil {
		t.Error("expected to get a non nil record")
	}
}

func testTodoListsAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	todoListOne := &TodoList{}
	todoListTwo := &TodoList{}
	if err = randomize.Struct(seed, todoListOne, todoListDBTypes, false, todoListColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize TodoList struct: %s", err)
	}
	if err = randomize.Struct(seed, todoListTwo, todoListDBTypes, false, todoListColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize TodoList struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = todoListOne.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}
	if err = todoListTwo.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice, err := TodoLists().All(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if len(slice) != 2 {
		t.Error("want 2 records, got:", len(slice))
	}
}

func testTodoListsCount(t *testing.T) {
	t.Parallel()

	var err error
	seed := randomize.NewSeed()
	todoListOne := &TodoList{}
	todoListTwo := &TodoList{}
	if err = randomize.Struct(seed, todoListOne, todoListDBTypes, false, todoListColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize TodoList struct: %s", err)
	}
	if err = randomize.Struct(seed, todoListTwo, todoListDBTypes, false, todoListColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize TodoList struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = todoListOne.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}
	if err = todoListTwo.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := TodoLists().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 2 {
		t.Error("want 2 records, got:", count)
	}
}

func todoListBeforeInsertHook(ctx context.Context, e boil.ContextExecutor, o *TodoList) error {
	*o = TodoList{}
	return nil
}

func todoListAfterInsertHook(ctx context.Context, e boil.ContextExecutor, o *TodoList) error {
	*o = TodoList{}
	return nil
}

func todoListAfterSelectHook(ctx context.Context, e boil.ContextExecutor, o *TodoList) error {
	*o = TodoList{}
	return nil
}

func todoListBeforeUpdateHook(ctx context.Context, e boil.ContextExecutor, o *TodoList) error {
	*o = TodoList{}
	return nil
}

func todoListAfterUpdateHook(ctx context.Context, e boil.ContextExecutor, o *TodoList) error {
	*o = TodoList{}
	return nil
}

func todoListBeforeDeleteHook(ctx context.Context, e boil.ContextExecutor, o *TodoList) error {
	*o = TodoList{}
	return nil
}

func todoListAfterDeleteHook(ctx context.Context, e boil.ContextExecutor, o *TodoList) error {
	*o = TodoList{}
	return nil
}

func todoListBeforeUpsertHook(ctx context.Context, e boil.ContextExecutor, o *TodoList) error {
	*o = TodoList{}
	return nil
}

func todoListAfterUpsertHook(ctx context.Context, e boil.ContextExecutor, o *TodoList) error {
	*o = TodoList{}
	return nil
}

func testTodoListsHooks(t *testing.T) {
	t.Parallel()

	var err error

	ctx := context.Background()
	empty := &TodoList{}
	o := &TodoList{}

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, o, todoListDBTypes, false); err != nil {
		t.Errorf("Unable to randomize TodoList object: %s", err)
	}

	AddTodoListHook(boil.BeforeInsertHook, todoListBeforeInsertHook)
	if err = o.doBeforeInsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeInsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeInsertHook function to empty object, but got: %#v", o)
	}
	todoListBeforeInsertHooks = []TodoListHook{}

	AddTodoListHook(boil.AfterInsertHook, todoListAfterInsertHook)
	if err = o.doAfterInsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterInsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterInsertHook function to empty object, but got: %#v", o)
	}
	todoListAfterInsertHooks = []TodoListHook{}

	AddTodoListHook(boil.AfterSelectHook, todoListAfterSelectHook)
	if err = o.doAfterSelectHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterSelectHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterSelectHook function to empty object, but got: %#v", o)
	}
	todoListAfterSelectHooks = []TodoListHook{}

	AddTodoListHook(boil.BeforeUpdateHook, todoListBeforeUpdateHook)
	if err = o.doBeforeUpdateHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeUpdateHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeUpdateHook function to empty object, but got: %#v", o)
	}
	todoListBeforeUpdateHooks = []TodoListHook{}

	AddTodoListHook(boil.AfterUpdateHook, todoListAfterUpdateHook)
	if err = o.doAfterUpdateHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterUpdateHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterUpdateHook function to empty object, but got: %#v", o)
	}
	todoListAfterUpdateHooks = []TodoListHook{}

	AddTodoListHook(boil.BeforeDeleteHook, todoListBeforeDeleteHook)
	if err = o.doBeforeDeleteHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeDeleteHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeDeleteHook function to empty object, but got: %#v", o)
	}
	todoListBeforeDeleteHooks = []TodoListHook{}

	AddTodoListHook(boil.AfterDeleteHook, todoListAfterDeleteHook)
	if err = o.doAfterDeleteHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterDeleteHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterDeleteHook function to empty object, but got: %#v", o)
	}
	todoListAfterDeleteHooks = []TodoListHook{}

	AddTodoListHook(boil.BeforeUpsertHook, todoListBeforeUpsertHook)
	if err = o.doBeforeUpsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeUpsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeUpsertHook function to empty object, but got: %#v", o)
	}
	todoListBeforeUpsertHooks = []TodoListHook{}

	AddTodoListHook(boil.AfterUpsertHook, todoListAfterUpsertHook)
	if err = o.doAfterUpsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterUpsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterUpsertHook function to empty object, but got: %#v", o)
	}
	todoListAfterUpsertHooks = []TodoListHook{}
}

func testTodoListsInsert(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &TodoList{}
	if err = randomize.Struct(seed, o, todoListDBTypes, true, todoListColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize TodoList struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := TodoLists().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}
}

func testTodoListsInsertWhitelist(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &TodoList{}
	if err = randomize.Struct(seed, o, todoListDBTypes, true); err != nil {
		t.Errorf("Unable to randomize TodoList struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Whitelist(todoListColumnsWithoutDefault...)); err != nil {
		t.Error(err)
	}

	count, err := TodoLists().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}
}

func testTodoListToManyTasks(t *testing.T) {
	var err error
	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a TodoList
	var b, c Task

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, todoListDBTypes, true, todoListColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize TodoList struct: %s", err)
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	if err = randomize.Struct(seed, &b, taskDBTypes, false, taskColumnsWithDefault...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &c, taskDBTypes, false, taskColumnsWithDefault...); err != nil {
		t.Fatal(err)
	}

	b.TodoListID = a.ID
	c.TodoListID = a.ID

	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = c.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	check, err := a.Tasks().All(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}

	bFound, cFound := false, false
	for _, v := range check {
		if v.TodoListID == b.TodoListID {
			bFound = true
		}
		if v.TodoListID == c.TodoListID {
			cFound = true
		}
	}

	if !bFound {
		t.Error("expected to find b")
	}
	if !cFound {
		t.Error("expected to find c")
	}

	slice := TodoListSlice{&a}
	if err = a.L.LoadTasks(ctx, tx, false, (*[]*TodoList)(&slice), nil); err != nil {
		t.Fatal(err)
	}
	if got := len(a.R.Tasks); got != 2 {
		t.Error("number of eager loaded records wrong, got:", got)
	}

	a.R.Tasks = nil
	if err = a.L.LoadTasks(ctx, tx, true, &a, nil); err != nil {
		t.Fatal(err)
	}
	if got := len(a.R.Tasks); got != 2 {
		t.Error("number of eager loaded records wrong, got:", got)
	}

	if t.Failed() {
		t.Logf("%#v", check)
	}
}

func testTodoListToManyAddOpTasks(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a TodoList
	var b, c, d, e Task

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, todoListDBTypes, false, strmangle.SetComplement(todoListPrimaryKeyColumns, todoListColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	foreigners := []*Task{&b, &c, &d, &e}
	for _, x := range foreigners {
		if err = randomize.Struct(seed, x, taskDBTypes, false, strmangle.SetComplement(taskPrimaryKeyColumns, taskColumnsWithoutDefault)...); err != nil {
			t.Fatal(err)
		}
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = c.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	foreignersSplitByInsertion := [][]*Task{
		{&b, &c},
		{&d, &e},
	}

	for i, x := range foreignersSplitByInsertion {
		err = a.AddTasks(ctx, tx, i != 0, x...)
		if err != nil {
			t.Fatal(err)
		}

		first := x[0]
		second := x[1]

		if a.ID != first.TodoListID {
			t.Error("foreign key was wrong value", a.ID, first.TodoListID)
		}
		if a.ID != second.TodoListID {
			t.Error("foreign key was wrong value", a.ID, second.TodoListID)
		}

		if first.R.TodoList != &a {
			t.Error("relationship was not added properly to the foreign slice")
		}
		if second.R.TodoList != &a {
			t.Error("relationship was not added properly to the foreign slice")
		}

		if a.R.Tasks[i*2] != first {
			t.Error("relationship struct slice not set to correct value")
		}
		if a.R.Tasks[i*2+1] != second {
			t.Error("relationship struct slice not set to correct value")
		}

		count, err := a.Tasks().Count(ctx, tx)
		if err != nil {
			t.Fatal(err)
		}
		if want := int64((i + 1) * 2); count != want {
			t.Error("want", want, "got", count)
		}
	}
}
func testTodoListToOneUserUsingUser(t *testing.T) {
	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var local TodoList
	var foreign User

	seed := randomize.NewSeed()
	if err := randomize.Struct(seed, &local, todoListDBTypes, false, todoListColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize TodoList struct: %s", err)
	}
	if err := randomize.Struct(seed, &foreign, userDBTypes, false, userColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize User struct: %s", err)
	}

	if err := foreign.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	local.UserID = foreign.ID
	if err := local.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	check, err := local.User().One(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}

	if check.ID != foreign.ID {
		t.Errorf("want: %v, got %v", foreign.ID, check.ID)
	}

	ranAfterSelectHook := false
	AddUserHook(boil.AfterSelectHook, func(ctx context.Context, e boil.ContextExecutor, o *User) error {
		ranAfterSelectHook = true
		return nil
	})

	slice := TodoListSlice{&local}
	if err = local.L.LoadUser(ctx, tx, false, (*[]*TodoList)(&slice), nil); err != nil {
		t.Fatal(err)
	}
	if local.R.User == nil {
		t.Error("struct should have been eager loaded")
	}

	local.R.User = nil
	if err = local.L.LoadUser(ctx, tx, true, &local, nil); err != nil {
		t.Fatal(err)
	}
	if local.R.User == nil {
		t.Error("struct should have been eager loaded")
	}

	if !ranAfterSelectHook {
		t.Error("failed to run AfterSelect hook for relationship")
	}
}

func testTodoListToOneSetOpUserUsingUser(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a TodoList
	var b, c User

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, todoListDBTypes, false, strmangle.SetComplement(todoListPrimaryKeyColumns, todoListColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &b, userDBTypes, false, strmangle.SetComplement(userPrimaryKeyColumns, userColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &c, userDBTypes, false, strmangle.SetComplement(userPrimaryKeyColumns, userColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	for i, x := range []*User{&b, &c} {
		err = a.SetUser(ctx, tx, i != 0, x)
		if err != nil {
			t.Fatal(err)
		}

		if a.R.User != x {
			t.Error("relationship struct not set to correct value")
		}

		if x.R.TodoLists[0] != &a {
			t.Error("failed to append to foreign relationship struct")
		}
		if a.UserID != x.ID {
			t.Error("foreign key was wrong value", a.UserID)
		}

		zero := reflect.Zero(reflect.TypeOf(a.UserID))
		reflect.Indirect(reflect.ValueOf(&a.UserID)).Set(zero)

		if err = a.Reload(ctx, tx); err != nil {
			t.Fatal("failed to reload", err)
		}

		if a.UserID != x.ID {
			t.Error("foreign key was wrong value", a.UserID, x.ID)
		}
	}
}

func testTodoListsReload(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &TodoList{}
	if err = randomize.Struct(seed, o, todoListDBTypes, true, todoListColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize TodoList struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if err = o.Reload(ctx, tx); err != nil {
		t.Error(err)
	}
}

func testTodoListsReloadAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &TodoList{}
	if err = randomize.Struct(seed, o, todoListDBTypes, true, todoListColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize TodoList struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice := TodoListSlice{o}

	if err = slice.ReloadAll(ctx, tx); err != nil {
		t.Error(err)
	}
}

func testTodoListsSelect(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &TodoList{}
	if err = randomize.Struct(seed, o, todoListDBTypes, true, todoListColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize TodoList struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice, err := TodoLists().All(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if len(slice) != 1 {
		t.Error("want one record, got:", len(slice))
	}
}

var (
	todoListDBTypes = map[string]string{`ID`: `uuid`, `Name`: `character varying`, `UserID`: `uuid`, `CreatedAt`: `timestamp without time zone`, `UpdatedAt`: `timestamp without time zone`}
	_               = bytes.MinRead
)

func testTodoListsUpdate(t *testing.T) {
	t.Parallel()

	if 0 == len(todoListPrimaryKeyColumns) {
		t.Skip("Skipping table with no primary key columns")
	}
	if len(todoListAllColumns) == len(todoListPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	o := &TodoList{}
	if err = randomize.Struct(seed, o, todoListDBTypes, true, todoListColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize TodoList struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := TodoLists().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}

	if err = randomize.Struct(seed, o, todoListDBTypes, true, todoListPrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize TodoList struct: %s", err)
	}

	if rowsAff, err := o.Update(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only affect one row but affected", rowsAff)
	}
}

func testTodoListsSliceUpdateAll(t *testing.T) {
	t.Parallel()

	if len(todoListAllColumns) == len(todoListPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	o := &TodoList{}
	if err = randomize.Struct(seed, o, todoListDBTypes, true, todoListColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize TodoList struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := TodoLists().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}

	if err = randomize.Struct(seed, o, todoListDBTypes, true, todoListPrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize TodoList struct: %s", err)
	}

	// Remove Primary keys and unique columns from what we plan to update
	var fields []string
	if strmangle.StringSliceMatch(todoListAllColumns, todoListPrimaryKeyColumns) {
		fields = todoListAllColumns
	} else {
		fields = strmangle.SetComplement(
			todoListAllColumns,
			todoListPrimaryKeyColumns,
		)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	typ := reflect.TypeOf(o).Elem()
	n := typ.NumField()

	updateMap := M{}
	for _, col := range fields {
		for i := 0; i < n; i++ {
			f := typ.Field(i)
			if f.Tag.Get("boil") == col {
				updateMap[col] = value.Field(i).Interface()
			}
		}
	}

	slice := TodoListSlice{o}
	if rowsAff, err := slice.UpdateAll(ctx, tx, updateMap); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("wanted one record updated but got", rowsAff)
	}
}

func testTodoListsUpsert(t *testing.T) {
	t.Parallel()

	if len(todoListAllColumns) == len(todoListPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	// Attempt the INSERT side of an UPSERT
	o := TodoList{}
	if err = randomize.Struct(seed, &o, todoListDBTypes, true); err != nil {
		t.Errorf("Unable to randomize TodoList struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Upsert(ctx, tx, false, nil, boil.Infer(), boil.Infer()); err != nil {
		t.Errorf("Unable to upsert TodoList: %s", err)
	}

	count, err := TodoLists().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}
	if count != 1 {
		t.Error("want one record, got:", count)
	}

	// Attempt the UPDATE side of an UPSERT
	if err = randomize.Struct(seed, &o, todoListDBTypes, false, todoListPrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize TodoList struct: %s", err)
	}

	if err = o.Upsert(ctx, tx, true, nil, boil.Infer(), boil.Infer()); err != nil {
		t.Errorf("Unable to upsert TodoList: %s", err)
	}

	count, err = TodoLists().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}
	if count != 1 {
		t.Error("want one record, got:", count)
	}
}
