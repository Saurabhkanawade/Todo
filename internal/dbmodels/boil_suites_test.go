// Code generated by SQLBoiler 4.14.2 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package dbmodels

import "testing"

// This test suite runs each operation test in parallel.
// Example, if your database has 3 tables, the suite will run:
// table1, table2 and table3 Delete in parallel
// table1, table2 and table3 Insert in parallel, and so forth.
// It does NOT run each operation group in parallel.
// Separating the tests thusly grants avoidance of Postgres deadlocks.
func TestParent(t *testing.T) {
	t.Run("Tags", testTags)
	t.Run("TaskTags", testTaskTags)
	t.Run("Tasks", testTasks)
	t.Run("TodoLists", testTodoLists)
	t.Run("Users", testUsers)
}

func TestDelete(t *testing.T) {
	t.Run("Tags", testTagsDelete)
	t.Run("TaskTags", testTaskTagsDelete)
	t.Run("Tasks", testTasksDelete)
	t.Run("TodoLists", testTodoListsDelete)
	t.Run("Users", testUsersDelete)
}

func TestQueryDeleteAll(t *testing.T) {
	t.Run("Tags", testTagsQueryDeleteAll)
	t.Run("TaskTags", testTaskTagsQueryDeleteAll)
	t.Run("Tasks", testTasksQueryDeleteAll)
	t.Run("TodoLists", testTodoListsQueryDeleteAll)
	t.Run("Users", testUsersQueryDeleteAll)
}

func TestSliceDeleteAll(t *testing.T) {
	t.Run("Tags", testTagsSliceDeleteAll)
	t.Run("TaskTags", testTaskTagsSliceDeleteAll)
	t.Run("Tasks", testTasksSliceDeleteAll)
	t.Run("TodoLists", testTodoListsSliceDeleteAll)
	t.Run("Users", testUsersSliceDeleteAll)
}

func TestExists(t *testing.T) {
	t.Run("Tags", testTagsExists)
	t.Run("TaskTags", testTaskTagsExists)
	t.Run("Tasks", testTasksExists)
	t.Run("TodoLists", testTodoListsExists)
	t.Run("Users", testUsersExists)
}

func TestFind(t *testing.T) {
	t.Run("Tags", testTagsFind)
	t.Run("TaskTags", testTaskTagsFind)
	t.Run("Tasks", testTasksFind)
	t.Run("TodoLists", testTodoListsFind)
	t.Run("Users", testUsersFind)
}

func TestBind(t *testing.T) {
	t.Run("Tags", testTagsBind)
	t.Run("TaskTags", testTaskTagsBind)
	t.Run("Tasks", testTasksBind)
	t.Run("TodoLists", testTodoListsBind)
	t.Run("Users", testUsersBind)
}

func TestOne(t *testing.T) {
	t.Run("Tags", testTagsOne)
	t.Run("TaskTags", testTaskTagsOne)
	t.Run("Tasks", testTasksOne)
	t.Run("TodoLists", testTodoListsOne)
	t.Run("Users", testUsersOne)
}

func TestAll(t *testing.T) {
	t.Run("Tags", testTagsAll)
	t.Run("TaskTags", testTaskTagsAll)
	t.Run("Tasks", testTasksAll)
	t.Run("TodoLists", testTodoListsAll)
	t.Run("Users", testUsersAll)
}

func TestCount(t *testing.T) {
	t.Run("Tags", testTagsCount)
	t.Run("TaskTags", testTaskTagsCount)
	t.Run("Tasks", testTasksCount)
	t.Run("TodoLists", testTodoListsCount)
	t.Run("Users", testUsersCount)
}

func TestHooks(t *testing.T) {
	t.Run("Tags", testTagsHooks)
	t.Run("TaskTags", testTaskTagsHooks)
	t.Run("Tasks", testTasksHooks)
	t.Run("TodoLists", testTodoListsHooks)
	t.Run("Users", testUsersHooks)
}

func TestInsert(t *testing.T) {
	t.Run("Tags", testTagsInsert)
	t.Run("Tags", testTagsInsertWhitelist)
	t.Run("TaskTags", testTaskTagsInsert)
	t.Run("TaskTags", testTaskTagsInsertWhitelist)
	t.Run("Tasks", testTasksInsert)
	t.Run("Tasks", testTasksInsertWhitelist)
	t.Run("TodoLists", testTodoListsInsert)
	t.Run("TodoLists", testTodoListsInsertWhitelist)
	t.Run("Users", testUsersInsert)
	t.Run("Users", testUsersInsertWhitelist)
}

// TestToOne tests cannot be run in parallel
// or deadlocks can occur.
func TestToOne(t *testing.T) {
	t.Run("TaskTagToTagUsingTag", testTaskTagToOneTagUsingTag)
	t.Run("TaskTagToTaskUsingTask", testTaskTagToOneTaskUsingTask)
	t.Run("TaskToTodoListUsingTodoList", testTaskToOneTodoListUsingTodoList)
	t.Run("TodoListToUserUsingUser", testTodoListToOneUserUsingUser)
}

// TestOneToOne tests cannot be run in parallel
// or deadlocks can occur.
func TestOneToOne(t *testing.T) {}

// TestToMany tests cannot be run in parallel
// or deadlocks can occur.
func TestToMany(t *testing.T) {
	t.Run("TagToTaskTags", testTagToManyTaskTags)
	t.Run("TaskToTaskTags", testTaskToManyTaskTags)
	t.Run("TodoListToTasks", testTodoListToManyTasks)
	t.Run("UserToTodoLists", testUserToManyTodoLists)
}

// TestToOneSet tests cannot be run in parallel
// or deadlocks can occur.
func TestToOneSet(t *testing.T) {
	t.Run("TaskTagToTagUsingTaskTags", testTaskTagToOneSetOpTagUsingTag)
	t.Run("TaskTagToTaskUsingTaskTags", testTaskTagToOneSetOpTaskUsingTask)
	t.Run("TaskToTodoListUsingTasks", testTaskToOneSetOpTodoListUsingTodoList)
	t.Run("TodoListToUserUsingTodoLists", testTodoListToOneSetOpUserUsingUser)
}

// TestToOneRemove tests cannot be run in parallel
// or deadlocks can occur.
func TestToOneRemove(t *testing.T) {}

// TestOneToOneSet tests cannot be run in parallel
// or deadlocks can occur.
func TestOneToOneSet(t *testing.T) {}

// TestOneToOneRemove tests cannot be run in parallel
// or deadlocks can occur.
func TestOneToOneRemove(t *testing.T) {}

// TestToManyAdd tests cannot be run in parallel
// or deadlocks can occur.
func TestToManyAdd(t *testing.T) {
	t.Run("TagToTaskTags", testTagToManyAddOpTaskTags)
	t.Run("TaskToTaskTags", testTaskToManyAddOpTaskTags)
	t.Run("TodoListToTasks", testTodoListToManyAddOpTasks)
	t.Run("UserToTodoLists", testUserToManyAddOpTodoLists)
}

// TestToManySet tests cannot be run in parallel
// or deadlocks can occur.
func TestToManySet(t *testing.T) {}

// TestToManyRemove tests cannot be run in parallel
// or deadlocks can occur.
func TestToManyRemove(t *testing.T) {}

func TestReload(t *testing.T) {
	t.Run("Tags", testTagsReload)
	t.Run("TaskTags", testTaskTagsReload)
	t.Run("Tasks", testTasksReload)
	t.Run("TodoLists", testTodoListsReload)
	t.Run("Users", testUsersReload)
}

func TestReloadAll(t *testing.T) {
	t.Run("Tags", testTagsReloadAll)
	t.Run("TaskTags", testTaskTagsReloadAll)
	t.Run("Tasks", testTasksReloadAll)
	t.Run("TodoLists", testTodoListsReloadAll)
	t.Run("Users", testUsersReloadAll)
}

func TestSelect(t *testing.T) {
	t.Run("Tags", testTagsSelect)
	t.Run("TaskTags", testTaskTagsSelect)
	t.Run("Tasks", testTasksSelect)
	t.Run("TodoLists", testTodoListsSelect)
	t.Run("Users", testUsersSelect)
}

func TestUpdate(t *testing.T) {
	t.Run("Tags", testTagsUpdate)
	t.Run("TaskTags", testTaskTagsUpdate)
	t.Run("Tasks", testTasksUpdate)
	t.Run("TodoLists", testTodoListsUpdate)
	t.Run("Users", testUsersUpdate)
}

func TestSliceUpdateAll(t *testing.T) {
	t.Run("Tags", testTagsSliceUpdateAll)
	t.Run("TaskTags", testTaskTagsSliceUpdateAll)
	t.Run("Tasks", testTasksSliceUpdateAll)
	t.Run("TodoLists", testTodoListsSliceUpdateAll)
	t.Run("Users", testUsersSliceUpdateAll)
}
